* Event Models
:PROPERTIES:
:TOC: :include descendants
:END:

:CONTENTS:
- [[#concepts-and-purpose][Concepts and purpose]]
  - [[#event-interface-and-polymorphism][Event interface and polymorphism]]
  - [[#event-type-system][Event type system]]
  - [[#common-metadata-pattern][Common metadata pattern]]
  - [[#queue-wait-time-tracking][Queue wait time tracking]]
- [[#design-and-implementation][Design and implementation]]
  - [[#event-interface][Event interface]]
  - [[#base-event-structure][Base event structure]]
  - [[#log-event-type][Log event type]]
  - [[#metric-event-type][Metric event type]]
  - [[#event-type-constants][Event type constants]]
- [[#usage-examples][Usage examples]]
  - [[#creating-different-event-types][Creating different event types]]
  - [[#working-with-event-metadata][Working with event metadata]]
  - [[#polymorphic-event-handling][Polymorphic event handling]]
  - [[#serializing-event-data][Serializing event data]]
:END:

** Concepts and purpose

*** Event interface and polymorphism

- Polymorphic events :: The event system uses an interface-based approach that enables:
  - Type-independent handling :: Processors can work with any event type
  - Unified queue handling :: The event queue can store different event types
  - Common operations :: All events support the same core operations
  - Type-specific behavior :: Each event type can implement custom behavior
  This approach provides flexibility while maintaining type safety.

*** Event type system

- Event type hierarchy :: The event system implements a type hierarchy with:
  - Common base event :: Provides shared functionality for all events
  - Specialized event types :: Implement type-specific data and behavior
  - Type identification :: Enables runtime determination of event types
  This hierarchy allows for specialized handling of different event types.

*** Common metadata pattern

- Shared metadata :: All events implement a metadata system that provides:
  - Common fields :: ID, timestamp, and other shared properties
  - Event-specific fields :: Custom fields based on event type
  - Consistent access :: Standard methods for accessing metadata
  This approach ensures consistent handling of event information.

*** Queue wait time tracking

- Wait time monitoring :: Events include timestamps for measuring queue time:
  - Enqueue time :: When the event was added to the queue
  - Processing time :: When the event was taken from the queue
  - Wait duration :: The difference between these times
  This tracking helps identify processing bottlenecks.

** Design and implementation

*** Event interface

- Event interface :: Defines the common behavior for all event types
  - Metadata access :: Methods for accessing event properties
  - ID retrieval :: Method for getting the unique event identifier
  - Type agnostic :: Works with any concrete event implementation
  #+BEGIN_SRC go
type Event interface {
	GetMetadata() map[string]interface{}
	GetCommonMetadata() map[string]interface{}
	GetEventID() string
}
  #+END_SRC

*** Base event structure

- BaseEvent struct :: Implements common functionality for all events
  - Core properties :: Event ID, timestamp, thread ID
  - Wait time tracking :: Enqueue time for monitoring
  - Shared methods :: Common implementations of interface methods
  #+BEGIN_SRC go
type BaseEvent struct {
	EventID     string
	Timestamp   string
	ThreadID    int
	EnqueueTime time.Time // Time when the event was added to the queue
}

func NewBaseEvent(eventID string) *BaseEvent {
	return &BaseEvent{
		EventID:     eventID,
		Timestamp:   time.Now().Format("2006-01-02 15:04:05"),
		ThreadID:    0,
		EnqueueTime: time.Time{}, // Will be set when added to queue
	}
}

func (b BaseEvent) GetEventID() string {
	return b.EventID
}

func (b BaseEvent) GetCommonMetadata() map[string]interface{} {
	return map[string]interface{}{
		"event_id":   b.EventID,
		"timestamp":  b.Timestamp,
		"thread_id":  b.ThreadID,
		"event_type": fmt.Sprintf("%T", b),
	}
}
  #+END_SRC

*** Log event type

- EventLog struct :: Represents a log message event
  - Embeds BaseEvent :: Inherits common event functionality
  - Log-specific fields :: Level and message for logging information
  - Custom metadata :: Adds log-specific fields to metadata
  #+BEGIN_SRC go
type EventLog struct {
	*BaseEvent
	Level   string
	Message string
}

func NewEventLog(eventID string, level string, message string) *EventLog {
	return &EventLog{
		BaseEvent: NewBaseEvent(eventID),
		Level:     level,
		Message:   message,
	}
}

func (e EventLog) GetMetadata() map[string]interface{} {
	metadata := e.GetCommonMetadata()
	metadata["level"] = e.Level
	metadata["message"] = e.Message
	return metadata
}
  #+END_SRC

*** Metric event type

- EventMetric struct :: Represents a numerical metric event
  - Embeds BaseEvent :: Inherits common event functionality
  - Metric-specific fields :: Numerical value for the metric
  - Custom metadata :: Adds metric-specific fields to metadata
  #+BEGIN_SRC go
type EventMetric struct {
	*BaseEvent
	Value float64
}

func NewEventMetric(eventID string, value float64) *EventMetric {
	return &EventMetric{
		BaseEvent: NewBaseEvent(eventID),
		Value:     value,
	}
}

func (e EventMetric) GetMetadata() map[string]interface{} {
	metadata := e.GetCommonMetadata()
	metadata["value"] = e.Value
	return metadata
}
  #+END_SRC

*** Event type constants

- Type constants :: Define standard event type identifiers
  - Log type :: Identifier for log events
  - Metric type :: Identifier for metric events
  - Extensibility :: System can be extended with additional types
  #+BEGIN_SRC go
const (
	EventTypeMetric = "metric"
	EventTypeLog    = "log"
)
  #+END_SRC

** Usage examples

*** Creating different event types

Example of creating log and metric events:

#+BEGIN_SRC go
// Create a log event
logEvent := models.NewEventLog(
    "log-123",         // Event ID
    "error",           // Log level
    "Database connection failed"  // Log message
)

// Create a metric event
metricEvent := models.NewEventMetric(
    "metric-456",      // Event ID
    98.6               // Metric value
)

fmt.Printf("Created log event with ID: %s\n", logEvent.GetEventID())
fmt.Printf("Created metric event with ID: %s\n", metricEvent.GetEventID())
#+END_SRC

*** Working with event metadata

Example of accessing event metadata:

#+BEGIN_SRC go
// Get common metadata from any event
func displayCommonMetadata(event models.Event) {
    metadata := event.GetCommonMetadata()
    fmt.Printf("Event ID: %s\n", metadata["event_id"])
    fmt.Printf("Timestamp: %s\n", metadata["timestamp"])
    fmt.Printf("Type: %s\n", metadata["event_type"])
}

// Get type-specific metadata
func displayEventDetails(event models.Event) {
    metadata := event.GetMetadata()
    
    // Common fields first
    fmt.Printf("Event ID: %s\n", metadata["event_id"])
    fmt.Printf("Timestamp: %s\n", metadata["timestamp"])
    
    // Type-specific fields
    if level, ok := metadata["level"]; ok {
        // This is a log event
        fmt.Printf("Level: %s\n", level)
        fmt.Printf("Message: %s\n", metadata["message"])
    } else if value, ok := metadata["value"]; ok {
        // This is a metric event
        fmt.Printf("Value: %.2f\n", value)
    }
}
#+END_SRC

*** Polymorphic event handling

Example of handling different event types polymorphically:

#+BEGIN_SRC go
// Process any event type
func processEvent(event models.Event) {
    // Common processing for all events
    fmt.Printf("Processing event: %s\n", event.GetEventID())
    
    // Type-specific processing
    switch e := event.(type) {
    case *models.EventLog:
        // Handle log event
        fmt.Printf("Log [%s]: %s\n", e.Level, e.Message)
        
        // Different handling based on log level
        if e.Level == "error" {
            // Special handling for errors
            notifyAdmins(e.Message)
        }
        
    case *models.EventMetric:
        // Handle metric event
        fmt.Printf("Metric: %.2f\n", e.Value)
        
        // Threshold checking
        if e.Value > 90 {
            // Alert on high values
            triggerAlert(e.Value)
        }
        
    default:
        fmt.Printf("Unknown event type: %T\n", event)
    }
}
#+END_SRC

*** Serializing event data

Example of serializing events to JSON:

#+BEGIN_SRC go
// Serialize any event to JSON
func serializeEvent(event models.Event) ([]byte, error) {
    // Get full metadata
    metadata := event.GetMetadata()
    
    // Add additional serialization info
    metadata["serialized_at"] = time.Now().Format(time.RFC3339)
    
    // Convert to JSON
    jsonData, err := json.MarshalIndent(metadata, "", "  ")
    if err != nil {
        return nil, fmt.Errorf("serialization error: %w", err)
    }
    
    return jsonData, nil
}

// Example usage
func printSerializedEvents(events []models.Event) {
    for i, event := range events {
        jsonData, err := serializeEvent(event)
        if err != nil {
            fmt.Printf("Error serializing event %d: %v\n", i, err)
            continue
        }
        
        fmt.Printf("Event %d JSON:\n%s\n\n", i, string(jsonData))
    }
}
#+END_SRC