* HTTP JSON Helpers
:PROPERTIES:
:TOC: :include descendants
:END:

:CONTENTS:
- [[#concepts-and-purpose][Concepts and purpose]]
  - [[#json-request-and-response-handling][JSON request and response handling]]
  - [[#opentelemetry-integration][OpenTelemetry integration]]
  - [[#background-task-management][Background task management]]
- [[#design-and-implementation][Design and implementation]]
  - [[#envelope-type][Envelope type]]
  - [[#json-response-writer][JSON response writer]]
  - [[#json-request-reader][JSON request reader]]
  - [[#json-marshaling-and-unmarshaling][JSON marshaling and unmarshaling]]
  - [[#goroutine-identification][Goroutine identification]]
  - [[#background-job-execution][Background job execution]]
  - [[#error-handling-for-json-parsing][Error handling for JSON parsing]]
- [[#usage-examples][Usage examples]]
  - [[#writing-json-responses][Writing JSON responses]]
  - [[#reading-json-requests][Reading JSON requests]]
  - [[#working-with-raw-json-data][Working with raw JSON data]]
  - [[#running-background-tasks][Running background tasks]]
  - [[#error-handling-in-handlers][Error handling in handlers]]
:END:

** Concepts and purpose

*** JSON request and response handling

- JSON helpers :: The helpers package provides utilities for handling JSON in HTTP requests and responses with:
  - Type-safe request parsing :: Convert incoming JSON into strongly typed Go structures
  - Consistent response formatting :: Wrap outgoing data in a standard envelope format
  - Comprehensive error handling :: Detailed, user-friendly error messages for malformed JSON
  - Request size limiting :: Protection against oversized payloads that could cause denial of service
  - Validation of request structure :: Detection of missing fields, unknown fields, and type mismatches
  These helpers standardize the JSON handling across the API, ensuring consistent behavior and reducing boilerplate code in handlers.

*** OpenTelemetry integration

- Observability integration :: The helpers include built-in OpenTelemetry instrumentation that provides:
  - Request/response tracing :: Track JSON parsing and serialization operations
  - Error recording :: Capture detailed error information in traces
  - Performance monitoring :: Measure time spent in JSON operations
  - Debugging context :: Provide context for troubleshooting JSON parsing issues
  This integration ensures that all JSON operations are properly traced and monitored, making it easier to diagnose issues in production.

*** Background task management

- Background task execution :: The helpers include a function for safely running background tasks:
  - Panic recovery :: Automatically catches and logs panics in background goroutines
  - Logging integration :: Reports errors to the application logger
  - Simplified concurrency :: Makes it easier to start background jobs without boilerplate
  - Improved reliability :: Prevents goroutine panics from crashing the application
  This functionality helps maintain application stability by properly managing background operations.

** Design and implementation

*** Envelope type

- Envelope data structure :: A type alias for a map that wraps response data
  - Uses `map[string]interface{}` to allow any JSON-serializable value
  - Provides a consistent top-level structure for all API responses
  - Enables adding metadata fields alongside the primary response data
  #+BEGIN_SRC go
type Envelope map[string]interface{}
  #+END_SRC

*** JSON response writer

- WriteJson function :: Writes JSON responses with proper headers and status codes
  - Creates a span for OpenTelemetry tracing
  - Uses a buffer to separate JSON marshaling from HTTP writing
  - Sets appropriate headers including Content-Type
  - Sets the specified HTTP status code
  - Returns any errors encountered during the process
  #+BEGIN_SRC go
// WriteJson will write the data as response with desired http header and http status code
func WriteJson(ctx context.Context, w http.ResponseWriter, status int, data Envelope, headers http.Header) error {
	_, span := otel.Tracer("WriteJson.Tracer").Start(ctx, "WriteJson.Span")
	defer span.End()

	// considering bytes.Buffer instead of directly writing to the http.responseWriter to be able to segregate the error handling for json marshaling and write errors
	nBuffer := bytes.Buffer{}
	err := json.NewEncoder(&nBuffer).Encode(data)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "failed to serialize data into json format")
		return err
	}
	span.SetAttributes(attribute.Int("encoded_bytes", nBuffer.Len()))

	for key, value := range headers {
		w.Header()[key] = value
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(status)
	span.SetAttributes(attribute.Int("status_code", status))

	_, err = w.Write(nBuffer.Bytes())
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "failed to write json data as a response")
		return err
	}

	span.SetStatus(codes.Ok, "successfully wrote response")
	return nil
}
  #+END_SRC

*** JSON request reader

- ReadJson function :: Reads and parses JSON from HTTP requests into typed Go structures
  - Uses generics for type-safe parsing
  - Creates a span for OpenTelemetry tracing
  - Limits request body size to prevent resource exhaustion
  - Disallows unknown fields to catch typos and misunderstandings
  - Returns a zero value and error when parsing fails
  #+BEGIN_SRC go
// ReadJson reads the json bytes from a requests and deserialize it in dst
func ReadJson[T any](ctx context.Context, w http.ResponseWriter, r *http.Request) (T, error) {
	_, span := otel.Tracer("ReadJson.Tracer").Start(ctx, "ReadJson.Span")
	defer span.End()
	var output, zero T

	// Limit the amount of bytes accepted as post request body
	maxBytes := 1_048_576 // _ here is only for visual separator purpose and for int values go's compiler will ignore it.
	r.Body = http.MaxBytesReader(w, r.Body, int64(maxBytes))
	dec := json.NewDecoder(r.Body)
	// Initialize the json.Decoder, and call the DisallowUnknownFields() method on it
	// before decoding. This means that if the JSON from the client now includes any
	// field which cannot be mapped to the target destination, the decoder will return
	// an error instead of just ignoring the field.
	dec.DisallowUnknownFields()
	span.SetAttributes(attribute.Bool("disallow_unknown_fields", true))
	span.SetAttributes(attribute.Int64("max_bytes", int64(maxBytes)))
	
	// Decode and error handling omitted for brevity
	// ...
	
	return output, nil
}
  #+END_SRC

*** JSON marshaling and unmarshaling

- MarshalJson function :: Serializes Go values to JSON bytes
  - Creates a span for OpenTelemetry tracing
  - Uses a buffer for efficient encoding
  - Records encoded size in span attributes
  - Returns the serialized bytes and any error encountered
  #+BEGIN_SRC go
// MarshalJson get's the input of anytype then serialize it in json
func MarshalJson(ctx context.Context, data interface{}) ([]byte, error) {
	_, span := otel.Tracer("MarshalJson.Tracer").Start(ctx, "MarshalJson.Span")
	defer span.End()

	// considering bytes.Buffer instead of directly writing to the http.responseWriter to be able to segregate the error handling for json marshaling and write errors
	nBuffer := bytes.Buffer{}
	err := json.NewEncoder(&nBuffer).Encode(data)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "failed to serialize data into json format")
		return nil, err
	}
	span.SetAttributes(attribute.Int("encoded_bytes", nBuffer.Len()))

	return nBuffer.Bytes(), nil
}
  #+END_SRC

- UnmarshalJson function :: Deserializes JSON bytes to typed Go values
  - Uses generics for type-safe parsing
  - Creates a span for OpenTelemetry tracing
  - Records the target type in span attributes on error
  - Returns the parsed value and any error encountered
  #+BEGIN_SRC go
// UnmarshalJson will deserialize data to the specified type
func UnmarshalJson[T any](ctx context.Context, jdata []byte) (*T, error) {
	var output T
	_, span := otel.Tracer("UnmarshalJson.Tracer").Start(ctx, "UnmarshalJson.Span")
	defer span.End()

	inputReader := bytes.NewReader(jdata)
	err := json.NewDecoder(inputReader).Decode(&output)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "failed to deserialize jsondata to the specified type")
		span.SetAttributes(attribute.String("data_type", fmt.Sprintf("%T", output)))
		return nil, err
	}
	return &output, nil
}
  #+END_SRC

*** Goroutine identification

- GetGoroutineID function :: Retrieves the ID of the current goroutine
  - Creates a span for OpenTelemetry tracing
  - Captures stack trace information
  - Parses the goroutine ID from the stack
  - Returns the ID as a uint64 value
  #+BEGIN_SRC go
// GetGoroutineID returns the ID of the current goroutine
func GetGoroutineID(ctx context.Context) uint64 {
	_, span := otel.Tracer("GetGoroutineID.Tracer").Start(ctx, "GetGoroutineID.Span")
	defer span.End()

	b := make([]byte, 64)
	b = b[:runtime.Stack(b, false)] // putting all to false to only get the stack trace of that single goroutine instead of all goroutines
	b = b[:bytes.IndexByte(b, ' ')]
	n, _ := strconv.ParseUint(string(b), 10, 64)
	return n
}
  #+END_SRC

*** Background job execution

- BackgroundJob function :: Runs a function in a background goroutine with panic recovery
  - Launches the provided function in a separate goroutine
  - Sets up a deferred panic handler to catch any panics
  - Logs any panics with the provided error message
  - Includes stack trace information in the error log
  #+BEGIN_SRC go
// BackgroundJob runs a function in a background goroutine with panic recovery
func BackgroundJob(fn func(), logger *zerolog.Logger, panicErrMsg string) {
	go func() {
		defer func() {
			if panicErr := recover(); panicErr != nil {
				pErr := errors.New(fmt.Sprintln(panicErr))
				logger.Error().Stack().Err(pErr).Msg(panicErrMsg)
			}
		}()
		fn()
	}()
}
  #+END_SRC

*** Error handling for JSON parsing

- Detailed error handling :: The ReadJson function provides comprehensive error handling
  - Syntax errors :: Detects and reports malformed JSON with position information
  - Type errors :: Identifies mismatched types between JSON and Go structures
  - Unknown fields :: Reports fields in the JSON that don't exist in the Go structure
  - Size limits :: Enforces maximum request body size
  - Multiple values :: Ensures request contains exactly one JSON value
  - Empty body :: Checks for completely empty request bodies
  Each error case produces a specific, user-friendly error message that helps API clients fix their requests.
  #+BEGIN_SRC go
if err != nil {
	var syntaxError *json.SyntaxError
	var unmarshalTypeError *json.UnmarshalTypeError
	var invalidUnmarshalError *json.InvalidUnmarshalError
	switch {
	// This happens if we json syntax errors. having wrong commas or indentation or missing quotes
	case errors.As(err, &syntaxError):
		err = fmt.Errorf("body contains badly-formed json (at character %d)", syntaxError.Offset)
		span.RecordError(err)
		span.SetStatus(codes.Error, "failed to read the json body")
		return zero, err
	case errors.Is(err, io.ErrUnexpectedEOF):
		var zero T
		err = errors.New("body contains badly-formed JSON")
		span.RecordError(err)
		span.SetStatus(codes.Error, "failed to read the json body")
		return zero, err
	// ...other error cases omitted for brevity
	}
}
  #+END_SRC

** Usage examples

*** Writing JSON responses

Example of writing a successful response:

#+BEGIN_SRC go
func getUserHandler(w http.ResponseWriter, r *http.Request) {
    // Get user ID from path or query parameters
    userID := r.PathValue("id")
    
    // Fetch user data (example)
    user := User{
        ID:    userID,
        Name:  "John Doe",
        Email: "john@example.com",
    }
    
    // Create response envelope
    data := helpers.Envelope{
        "user": user,
        "meta": map[string]interface{}{
            "timestamp": time.Now().Unix(),
            "version":   "1.0",
        },
    }
    
    // Set custom headers if needed
    headers := http.Header{}
    headers.Set("Cache-Control", "max-age=30")
    
    // Write the JSON response
    err := helpers.WriteJson(r.Context(), w, http.StatusOK, data, headers)
    if err != nil {
        // Handle the error
        serverErrorResponse(w, r, err)
        return
    }
}
#+END_SRC

*** Reading JSON requests

Example of reading and validating a JSON request:

#+BEGIN_SRC go
func createUserHandler(w http.ResponseWriter, r *http.Request) {
    // Define the input structure
    var input struct {
        Name     string `json:"name"`
        Email    string `json:"email"`
        Password string `json:"password"`
    }
    
    // Read and parse the JSON request body
    input, err := helpers.ReadJson[struct {
        Name     string `json:"name"`
        Email    string `json:"email"`
        Password string `json:"password"`
    }](r.Context(), w, r)
    
    if err != nil {
        // The ReadJson function will return appropriate error messages
        // that can be sent directly to the client
        badRequestResponse(w, r, err)
        return
    }
    
    // Validate the input
    validator := validators.NewValidator()
    validator.Check(input.Name != "", "name", "must be provided")
    validator.Check(input.Email != "", "email", "must be provided")
    validator.Check(input.Password != "", "password", "must be provided")
    
    if !validator.Valid() {
        // Return validation errors
        validationErrorResponse(w, r, validator.Errors)
        return
    }
    
    // Process the valid input...
}
#+END_SRC

*** Working with raw JSON data

Example of working with raw JSON data:

#+BEGIN_SRC go
func processData(ctx context.Context, data map[string]interface{}) ([]byte, error) {
    // Add a timestamp to the data
    data["processed_at"] = time.Now()
    
    // Convert the data to JSON
    jsonBytes, err := helpers.MarshalJson(ctx, data)
    if err != nil {
        return nil, fmt.Errorf("error serializing data: %w", err)
    }
    
    // Do something with the JSON bytes...
    
    // Now parse it back to a specific type
    type ProcessedData struct {
        ID          string    `json:"id"`
        Name        string    `json:"name"`
        ProcessedAt time.Time `json:"processed_at"`
    }
    
    processedData, err := helpers.UnmarshalJson[ProcessedData](ctx, jsonBytes)
    if err != nil {
        return nil, fmt.Errorf("error parsing processed data: %w", err)
    }
    
    // Use the typed data...
    fmt.Printf("Processed %s at %v\n", processedData.Name, processedData.ProcessedAt)
    
    return jsonBytes, nil
}
#+END_SRC

*** Running background tasks

Example of running tasks in the background with panic recovery:

#+BEGIN_SRC go
func startBackgroundTasks(logger *zerolog.Logger) {
    // Start a periodic cleanup task
    helpers.BackgroundJob(func() {
        for {
            // Perform cleanup operations
            cleanupOldData()
            
            // Sleep for a while
            time.Sleep(1 * time.Hour)
        }
    }, logger, "periodic cleanup task panicked")
    
    // Start a background processing job
    helpers.BackgroundJob(func() {
        processQueuedItems()
    }, logger, "queue processing task panicked")
    
    // Start a task that could potentially panic
    helpers.BackgroundJob(func() {
        // This will be caught by the panic handler
        dangerousOperation()
    }, logger, "dangerous operation panicked")
}

func cleanupOldData() {
    // Implementation of cleanup logic
}

func processQueuedItems() {
    // Implementation of queue processing
}

func dangerousOperation() {
    // This might panic, but won't crash the application
    items := []string{}
    fmt.Println(items[99]) // This will panic with index out of range
}
#+END_SRC

*** Error handling in handlers

Example of error handling in a complete handler:

#+BEGIN_SRC go
func createItemHandler(w http.ResponseWriter, r *http.Request) {
    // Parse the JSON request body
    var input struct {
        Name        string  `json:"name"`
        Description string  `json:"description"`
        Price       float64 `json:"price"`
    }
    
    input, err := helpers.ReadJson[struct {
        Name        string  `json:"name"`
        Description string  `json:"description"`
        Price       float64 `json:"price"`
    }](r.Context(), w, r)
    
    if err != nil {
        // Send appropriate error response based on the type of error
        switch {
        case strings.Contains(err.Error(), "body contains unknown field"):
            // Unknown field error
            badRequestResponse(w, r, err)
        case strings.Contains(err.Error(), "body must not be larger than"):
            // Request too large
            requestTooLargeResponse(w, r, err)
        default:
            // Other JSON parsing errors
            badRequestResponse(w, r, err)
        }
        return
    }
    
    // Process the input and generate a response
    item := Item{
        ID:          uuid.New().String(),
        Name:        input.Name,
        Description: input.Description,
        Price:       input.Price,
        CreatedAt:   time.Now(),
    }
    
    // Send success response
    err = helpers.WriteJson(r.Context(), w, http.StatusCreated, helpers.Envelope{"item": item}, nil)
    if err != nil {
        serverErrorResponse(w, r, err)
    }
}
#+END_SRC