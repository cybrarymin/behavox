* API Server
:PROPERTIES:
:TOC: :include descendants
:END:

:CONTENTS:
- [[#concepts-and-purpose][Concepts and purpose]]
  - [[#api-server-configuration][API server configuration]]
  - [[#request-context-management][Request context management]]
  - [[#middleware-integration][Middleware integration]]
  - [[#event-handling][Event handling]]
- [[#design-and-implementation][Design and implementation]]
  - [[#api-server-configuration-structure][API server configuration structure]]
  - [[#api-server-structure][API server structure]]
  - [[#configuration-validation][Configuration validation]]
  - [[#request-context-handling][Request context handling]]
  - [[#middleware-implementation][Middleware implementation]]
  - [[#event-handling-implementation][Event handling implementation]]
- [[#usage-examples][Usage examples]]
  - [[#creating-and-configuring-the-api-server][Creating and configuring the API server]]
  - [[#handling-events][Handling events]]
  - [[#middleware-usage][Middleware usage]]
  - [[#complete-server-initialization][Complete server initialization]]
:END:

** Concepts and purpose

*** API server configuration

- API server configuration :: The API server configuration provides necessary parameters for HTTP/HTTPS serving, connection handling, TLS settings, and rate limiting. The configuration holds settings that control:
  - Server address and protocol :: The address and protocol (HTTP/HTTPS) used by the server
  - Connection timeouts :: Read, write, and idle timeouts to prevent resource exhaustion
  - TLS settings :: Certificate and key file paths for HTTPS serving
  - Rate limiting :: Global and per-client rate limiting settings to prevent abuse
  These configuration parameters enable fine-tuning of the server's behavior to meet performance and security requirements.

*** Request context management

- Request context :: Each API request is assigned a unique request ID stored in the request context, enabling:
  - Request tracing :: The ability to track a request through the system for debugging
  - Correlation :: Linking logs, metrics, and traces to specific requests
  - Observability :: Enhanced monitoring and troubleshooting capabilities
  The request ID is a UUID generated for each incoming request and made available to all handlers and middleware in the request processing chain.

*** Middleware integration

- Middleware pipeline :: The API server implements a middleware pipeline that provides:
  - Panic recovery :: Prevents server crashes by recovering from panics
  - Rate limiting :: Controls request frequency to prevent abuse
  - OpenTelemetry integration :: For distributed tracing and performance monitoring
  - Prometheus metrics :: Exposes metrics for monitoring and alerting
  - JWT authentication :: Secures API endpoints with token-based authentication
  These middleware components can be selectively applied to different routes to enforce security policies and collect operational data.

*** Event handling

- Event processing :: The API server integrates with an event processing system that:
  - Processes log events :: Records log messages with different severity levels
  - Processes metric events :: Captures numeric metrics for monitoring
  - Provides queue statistics :: Exposes information about the event queue size
  - Supports asynchronous processing :: Events are queued for later processing
  This enables a decoupled architecture where API requests can quickly return while events are processed asynchronously.

** Design and implementation

*** API server configuration structure

- API server configuration :: The `ApiServerCfg` struct defines all necessary settings for running the API server
  | ~ListenAddr *url.URL~       | URL containing address and protocol for server to listen on |
  | ~ServerReadTimeout~         | Maximum time allowed to read client request bodies |
  | ~ServerWriteTimeout~        | Maximum time allowed to write a response to the client |
  | ~ServerIdleTimeout~         | Maximum time connection can be idle before closing |
  | ~TlsCertFile~               | Path to TLS certificate file for HTTPS serving |
  | ~TlsKeyFile~                | Path to TLS key file for HTTPS serving |
  | ~RateLimit~                 | Nested struct containing rate limiting settings |
  | ~RateLimit.GlobalRateLimit~ | Maximum requests per second for entire server |
  | ~RateLimit.perClientRateLimit~ | Maximum requests per second per client IP |
  | ~RateLimit.Enabled~         | Flag to enable/disable rate limiting |
  #+BEGIN_SRC go
type ApiServerCfg struct {
	ListenAddr         *url.URL      // http server listen address url
	ServerReadTimeout  time.Duration // amount of time allowed to read a request body otherwise server will return an error
	ServerWriteTimeout time.Duration // amount of time allowed to write a response for the client
	ServerIdleTimeout  time.Duration // amount of time in idle mode before closing the connection with client
	TlsCertFile        string        // Tls certificate file for https serving
	TlsKeyFile         string        // Tls key file https serving
	RateLimit          struct {
		GlobalRateLimit    int64
		perClientRateLimit int64
		Enabled            bool
	}
}
  #+END_SRC

- Configuration factory :: The `NewApiServerCfg` function creates and initializes a properly configured `ApiServerCfg` instance
  #+BEGIN_SRC go
func NewApiServerCfg(listenAddr *url.URL, tlsCertFile string, tlsKeyFile string, rateLimitEnabled bool, globalRateLimit int64, perCleintRateLimit int64, srvReadTimeout, srvIdleTimeout, srvWriteTimeout time.Duration) *ApiServerCfg {
	return &ApiServerCfg{
		ListenAddr:         listenAddr,
		ServerReadTimeout:  srvReadTimeout,
		ServerWriteTimeout: srvWriteTimeout,
		ServerIdleTimeout:  srvIdleTimeout,
		TlsCertFile:        tlsCertFile,
		TlsKeyFile:         tlsKeyFile,
		RateLimit: struct {
			GlobalRateLimit    int64
			perClientRateLimit int64
			Enabled            bool
		}{
			GlobalRateLimit:    globalRateLimit,
			Enabled:            rateLimitEnabled,
			perClientRateLimit: perCleintRateLimit,
		},
	}
}
  #+END_SRC

*** API server structure

- API server :: The `ApiServer` struct encapsulates the server's state and dependencies
  | ~Cfg *ApiServerCfg~     | Reference to server configuration |
  | ~Logger *zerolog.Logger~ | Structured logger for recording server events |
  | ~Wg sync.WaitGroup~     | Wait group for coordinating goroutines |
  | ~mu sync.RWMutex~       | Read-write mutex for thread-safe operations |
  | ~models *data.Models~   | Reference to data models including event queue |
  #+BEGIN_SRC go
type ApiServer struct {
	Cfg    *ApiServerCfg
	Logger *zerolog.Logger
	Wg     sync.WaitGroup
	mu     sync.RWMutex
	models *data.Models
}
  #+END_SRC

- Server factory :: The `NewApiServer` function creates a new `ApiServer` instance with the given configuration, logger, and models
  #+BEGIN_SRC go
func NewApiServer(cfg *ApiServerCfg, logger *zerolog.Logger, models *data.Models) *ApiServer {
	return &ApiServer{
		Cfg:    cfg,
		Logger: logger,
		models: models,
	}
}
  #+END_SRC

*** Configuration validation

- Configuration validation :: The `validation` method checks the configuration for validity
  - Verifies that the URL scheme is either "http" or "https"
  - For HTTPS, checks that certificate and key files exist
  - Returns an updated validator with any validation errors
  #+BEGIN_SRC go
func (cfg *ApiServerCfg) validation(nVal helpers.Validator) *helpers.Validator {
	nVal.Check(cfg.ListenAddr.Scheme == "http" || cfg.ListenAddr.Scheme == "https", "listen-addr", "invalid schema")
	if cfg.ListenAddr.Scheme == "https" {
		_, err := os.Stat(cfg.TlsCertFile)
		nVal.Check(err == nil, "tls-certfile", fmt.Sprintf("%s doesn't exists", cfg.TlsCertFile))
		_, err = os.Stat(cfg.TlsKeyFile)
		nVal.Check(err == nil, "tls-key", fmt.Sprintf("%s doesn't exists", cfg.TlsKeyFile))
	}
	return &nVal
}
  #+END_SRC

*** Request context handling

- Request context key :: A constant defining the key used to store and retrieve the request ID in the context
  #+BEGIN_SRC go
type contextKey string

const RequestContextKey = contextKey("request_id")
  #+END_SRC

- Setting request ID :: The `setReqIDContext` method generates a unique UUID for each request and adds it to the request context
  #+BEGIN_SRC go
func (api *ApiServer) setReqIDContext(r *http.Request) *http.Request {
	reqId := uuid.New()
	nCtx := context.WithValue(r.Context(), RequestContextKey, reqId.String())
	r = r.WithContext(nCtx)
	return r
}
  #+END_SRC

- Getting request ID :: The `getReqIDContext` method retrieves the request ID from the request context
  #+BEGIN_SRC go
func (api *ApiServer) getReqIDContext(r *http.Request) string {
	reqID := r.Context().Value(RequestContextKey)
	return reqID.(string)
}
  #+END_SRC

*** Middleware implementation

- Context middleware :: The `setContextHandler` middleware ensures each request has a request ID in its context
  #+BEGIN_SRC go
func (api *ApiServer) setContextHandler(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		r = api.setReqIDContext(r)
		next.ServeHTTP(w, r)
	})
}
  #+END_SRC

- Panic recovery :: The `panicRecovery` middleware catches panics to prevent server crashes
  #+BEGIN_SRC go
func (api *ApiServer) panicRecovery(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		defer func() {
			if panicErr := recover(); panicErr != nil {
				w.Header().Set("Connection", "close")
				api.serverErrorResponse(w, r, fmt.Errorf("%s, %s", panicErr, debug.Stack()))
			}
		}()
		next.ServeHTTP(w, r)
	})
}
  #+END_SRC

- OpenTelemetry integration :: The `otelHandler` middleware adds distributed tracing
  #+BEGIN_SRC go
func (api *ApiServer) otelHandler(next http.Handler) http.Handler {
	newNext := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		reqID := api.getReqIDContext(r)
		span := trace.SpanFromContext(r.Context())
		if reqID != "" {
			span.SetAttributes(attribute.String("http.request.id", reqID))
		}
		next.ServeHTTP(w, r)
	})

	return otelhttp.NewHandler(newNext, "otel.instrumented.handler")
}
  #+END_SRC

- Prometheus metrics :: The `promHandler` middleware collects metrics for monitoring
  #+BEGIN_SRC go
func (api *ApiServer) promHandler(next http.HandlerFunc) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		observ.PromHttpTotalRequests.WithLabelValues().Inc()
		observ.PromHttpTotalPathRequests.WithLabelValues(r.RequestURI).Inc()
		pTimer := prometheus.NewTimer(observ.PromHttpDuration.WithLabelValues(r.RequestURI))
		defer pTimer.ObserveDuration()
		snoopMetrics := httpsnoop.CaptureMetrics(next, w, r)
		observ.PromHttpTotalResponse.WithLabelValues().Inc()
		observ.PromHttpResponseStatus.WithLabelValues(r.RequestURI, strconv.Itoa(snoopMetrics.Code)).Inc()
	}
}
  #+END_SRC

- Rate limiting :: The `rateLimit` middleware implements global and per-client rate limiting
  #+BEGIN_SRC go
func (api *ApiServer) rateLimit(next http.Handler) http.Handler {
	if api.Cfg.RateLimit.Enabled {
		// Global rate limiter
		busrtSize := api.Cfg.RateLimit.GlobalRateLimit + api.Cfg.RateLimit.GlobalRateLimit/10
		nRL := rate.NewLimiter(rate.Limit(api.Cfg.RateLimit.GlobalRateLimit), int(busrtSize))

		// Per IP or Per Client rate limiter
		pcbusrtSize := api.Cfg.RateLimit.perClientRateLimit + api.Cfg.RateLimit.perClientRateLimit/10
		pcnRL := make(map[string]*ClientRateLimiter)

		expirationTime := 30 * time.Second

		return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			// Apply rate limiting logic here
			// ... (implementation details)
			next.ServeHTTP(w, r)
		})
	} else {
		return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			next.ServeHTTP(w, r)
		})
	}
}
  #+END_SRC

- JWT authentication :: The `JWTAuth` middleware validates JWT tokens for secure access
  #+BEGIN_SRC go
func (api *ApiServer) JWTAuth(next http.HandlerFunc) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// JWT validation logic here
		// ... (implementation details)
		next.ServeHTTP(w, r)
	}
}
  #+END_SRC

*** Event handling implementation

- Event creation :: The `createEventHandler` processes incoming event creation requests
  #+BEGIN_SRC go
func (api *ApiServer) createEventHandler(w http.ResponseWriter, r *http.Request) {
	ctx, span := otel.Tracer("createEventHandler.Tracer").Start(r.Context(), "createEventHandler.Span")
	defer span.End()

	// Reading the request body
	nReq, err := helpers.ReadJson[EventCreateReq](ctx, w, r)
	if err != nil {
		// Error handling
		return
	}

	// Input validation
	// ... (validation logic)

	// Create the appropriate event type
	var nEvent data.Event
	switch nReq.Event.EventType {
	case data.EventTypeLog:
		nEvent = data.NewEventLog(nReq.Event.EventID, *nReq.Event.Level, *nReq.Event.Message)
	case data.EventTypeMetric:
		nEvent = data.NewEventMetric(nReq.Event.EventID, *nReq.Event.Value)
	}

	// Queue the event for processing
	err = api.models.EventQueue.PutEvent(ctx, nEvent)
	if err != nil {
		// Error handling
		return
	}

	// Respond with success
	nRes := NewEventCreateRes(nReq.Event.EventType, nReq.Event.EventID, nReq.Event.Value, nReq.Event.Level, nReq.Event.Message)
	helpers.WriteJson(ctx, w, http.StatusOK, helpers.Envelope{"event": nRes}, nil)
}
  #+END_SRC

- Event statistics :: The `GetEventStatsHandler` provides information about the event queue
  #+BEGIN_SRC go
func (api *ApiServer) GetEventStatsHandler(w http.ResponseWriter, r *http.Request) {
	ctx, span := otel.Tracer("GetEventStatsHandler.Tracer").Start(r.Context(), "GetEventStatsHandler.Span")
	defer span.End()

	// Get queue size
	queueCurrentSize := api.models.EventQueue.Size(ctx)

	// Log the request
	api.Logger.Info().
		Int64("queue_size", int64(queueCurrentSize)).
		Str("remote_addr", r.RemoteAddr).
		Msg("fetched the event queue size")

	// Return queue statistics
	nRes := NewEventStatsGetRes(uint64(queueCurrentSize))
	helpers.WriteJson(ctx, w, http.StatusOK, helpers.Envelope{"result": nRes}, nil)
}
  #+END_SRC

** Usage examples

*** Creating and configuring the API server

Example of creating and configuring the API server:

#+BEGIN_SRC go
package main

import (
	"net/url"
	"os"
	"time"
	
	"github.com/cybrarymin/behavox/api"
	"github.com/cybrarymin/behavox/internal/models"
	"github.com/rs/zerolog"
)

func main() {
	// Create a logger
	logger := zerolog.New(os.Stdout).With().Timestamp().Logger()
	
	// Parse the listen address
	listenURL, _ := url.Parse("http://localhost:8080")
	
	// Create the API server configuration
	cfg := api.NewApiServerCfg(
		listenURL,                  // Listen address
		"",                         // TLS cert file (empty for HTTP)
		"",                         // TLS key file (empty for HTTP)
		true,                       // Enable rate limiting
		100,                        // Global rate limit: 100 requests/second
		10,                         // Per-client rate limit: 10 requests/second
		time.Second*10,             // Read timeout
		time.Second*120,            // Idle timeout
		time.Second*10,             // Write timeout
	)
	
	// Create event queue and models
	eventQueue := models.NewEventQueue()
	appModels := models.NewModels(eventQueue, nil, nil)
	
	// Create the API server
	server := api.NewApiServer(cfg, &logger, appModels)
	
	// Server is now ready for route configuration and startup
}
#+END_SRC

*** Handling events

Example of creating events via the API:

#+BEGIN_SRC go
package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/google/uuid"
)

func createLogEvent() {
	// Create a log event
	eventID := uuid.New().String()
	level := "info"
	message := "Test log message"
	
	// Create the request payload
	payload := map[string]interface{}{
		"event": map[string]interface{}{
			"event_type": "log",
			"event_id":   eventID,
			"level":      level,
			"message":    message,
		},
	}
	
	// Marshal to JSON
	jsonData, _ := json.Marshal(payload)
	
	// Create the HTTP request
	req, _ := http.NewRequest("POST", "http://localhost:8080/v1/events", bytes.NewBuffer(jsonData))
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Authorization", "Bearer YOUR_JWT_TOKEN")
	
	// Send the request
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		fmt.Println("Error:", err)
		return
	}
	defer resp.Body.Close()
	
	// Process the response
	fmt.Println("Response Status:", resp.Status)
}

func createMetricEvent() {
	// Create a metric event
	eventID := uuid.New().String()
	value := 42.5
	
	// Create the request payload
	payload := map[string]interface{}{
		"event": map[string]interface{}{
			"event_type": "metric",
			"event_id":   eventID,
			"value":      value,
		},
	}
	
	// Marshal to JSON
	jsonData, _ := json.Marshal(payload)
	
	// Create the HTTP request
	req, _ := http.NewRequest("POST", "http://localhost:8080/v1/events", bytes.NewBuffer(jsonData))
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Authorization", "Bearer YOUR_JWT_TOKEN")
	
	// Send the request
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		fmt.Println("Error:", err)
		return
	}
	defer resp.Body.Close()
	
	// Process the response
	fmt.Println("Response Status:", resp.Status)
}
#+END_SRC

*** Middleware usage

Example of custom middleware implementation using the API server's middleware components:

#+BEGIN_SRC go
package main

import (
	"net/http"
	
	"github.com/cybrarymin/behavox/api"
)

func customHandler(w http.ResponseWriter, r *http.Request) {
	// Your handler logic here
	w.Write([]byte("Hello, World!"))
}

func setupRoutes(server *api.ApiServer) http.Handler {
	// Create a handler chain with all middleware
	handler := http.HandlerFunc(customHandler)
	
	// Apply middleware in the desired order
	securedHandler := server.JWTAuth(handler)                  // Require JWT authentication
	metricHandler := server.promHandler(securedHandler)        // Collect Prometheus metrics
	
	// Create final handler chain
	finalHandler := server.panicRecovery(                      // Recover from panics
		server.setContextHandler(                           // Set request ID
			server.otelHandler(                          // Add tracing
				server.rateLimit(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
					metricHandler(w, r)              // Apply rate limiting to the chain
				})),
			),
		),
	)
	
	return finalHandler
}
#+END_SRC

*** Complete server initialization

Example of a complete server initialization with proper shutdown handling:

#+BEGIN_SRC go
package main

import (
	"context"
	"net/http"
	"net/url"
	"os"
	"os/signal"
	"syscall"
	"time"
	
	"github.com/cybrarymin/behavox/api"
	"github.com/cybrarymin/behavox/internal/models"
	"github.com/rs/zerolog"
)

func main() {
	// Create context
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()
	
	// Initialize logger
	logger := zerolog.New(os.Stdout).With().Timestamp().Logger()
	
	// Create event queue and models
	eventQueue := models.NewEventQueue()
	appModels := models.NewModels(eventQueue, nil, nil)
	
	// Create API server configuration
	listenURL, _ := url.Parse("http://localhost:8080")
	cfg := api.NewApiServerCfg(
		listenURL,
		"",
		"",
		true,
		100,
		10,
		time.Second*10,
		time.Second*120,
		time.Second*10,
	)
	
	// Create API server
	server := api.NewApiServer(cfg, &logger, appModels)
	
	// Configure HTTP server
	httpServer := &http.Server{
		Addr:         cfg.ListenAddr.Host,
		Handler:      server.routes(),
		ReadTimeout:  cfg.ServerReadTimeout,
		WriteTimeout: cfg.ServerWriteTimeout,
		IdleTimeout:  cfg.ServerIdleTimeout,
	}
	
	// Start HTTP server
	go func() {
		logger.Info().Str("addr", httpServer.Addr).Msg("Starting HTTP server")
		if err := httpServer.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			logger.Fatal().Err(err).Msg("HTTP server error")
		}
	}()
	
	// Wait for termination signal
	stop := make(chan os.Signal, 1)
	signal.Notify(stop, syscall.SIGINT, syscall.SIGTERM)
	<-stop
	
	// Graceful shutdown
	logger.Info().Msg("Shutting down server...")
	
	// Create shutdown timeout context
	shutdownCtx, shutdownCancel := context.WithTimeout(ctx, 10*time.Second)
	defer shutdownCancel()
	
	// Shutdown HTTP server
	if err := httpServer.Shutdown(shutdownCtx); err != nil {
		logger.Fatal().Err(err).Msg("Server shutdown failed")
	}
	
	logger.Info().Msg("Server gracefully stopped")
}
#+END_SRC