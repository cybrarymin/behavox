* API Error Handling
:PROPERTIES:
:TOC: :include descendants
:END:

:CONTENTS:
- [[#concepts-and-purpose][Concepts and purpose]]
  - [[#centralized-error-handling][Centralized error handling]]
  - [[#consistent-error-responses][Consistent error responses]]
  - [[#error-categorization][Error categorization]]
- [[#design-and-implementation][Design and implementation]]
  - [[#error-logging-mechanism][Error logging mechanism]]
  - [[#standardized-error-response-structure][Standardized error response structure]]
  - [[#server-error-handling][Server error handling]]
  - [[#client-error-handling][Client error handling]]
  - [[#authentication-and-authorization-errors][Authentication and authorization errors]]
  - [[#resource-limitation-errors][Resource limitation errors]]
- [[#usage-examples][Usage examples]]
  - [[#handling-internal-server-errors][Handling internal server errors]]
  - [[#handling-validation-errors][Handling validation errors]]
  - [[#managing-authentication-failures][Managing authentication failures]]
  - [[#responding-to-rate-limiting][Responding to rate limiting]]
:END:

** Concepts and purpose

*** Centralized error handling

- Centralized error system :: The error handling system provides a consistent approach for processing and responding to all API errors. It:
  - Centralizes error logging :: All errors are logged through a common mechanism
  - Standardizes error responses :: All error responses follow a consistent JSON format
  - Simplifies handler code :: Handlers delegate error handling to the centralized system
  - Improves error visibility :: All errors are properly captured and logged
  This approach ensures that error handling is consistent across the entire API, reducing code duplication and improving error traceability.

*** Consistent error responses

- Standardized responses :: All API error responses follow a consistent structure that:
  - Uses proper HTTP status codes :: Maps error types to appropriate HTTP status codes
  - Provides consistent JSON format :: Wraps errors in a standard envelope structure
  - Includes clear error messages :: Gives human-readable explanations of what went wrong
  - Sets appropriate headers :: Includes relevant headers like WWW-Authenticate when needed
  This consistency makes it easier for API clients to handle errors programmatically.

*** Error categorization

- Error types :: The API categorizes errors into distinct types that determine the response:
  - Server errors :: Internal errors not caused by the client (500 series)
  - Client validation errors :: Issues with the client's request format or values (400, 422)
  - Authentication errors :: Issues with credentials or access tokens (401)
  - Authorization errors :: Permission-related errors for authenticated users (403)
  - Resource errors :: Problems with requested resources (404, 405)
  - Rate limiting errors :: Throttling due to excessive requests (429)
  - Availability errors :: Service unavailability issues (503)
  This categorization ensures appropriate handling based on error type and responsibility.

** Design and implementation

*** Error logging mechanism

- Error logger :: The `logError` method centralizes error logging
  - Uses structured logging :: Logs errors with context and metadata
  - Encapsulates logger implementation :: Abstracts the specific logging library
  - Standardizes log format :: Ensures consistent error log entries
  #+BEGIN_SRC go
// logError is the method we use to log the errors hapiens on the server side for the ApiServer.
func (api *ApiServer) logError(err error) {
	api.Logger.Error().Err(err).Send()
}
  #+END_SRC

*** Standardized error response structure

- Error response formatter :: The `errorResponse` method creates standardized error responses
  - Uses consistent envelope format :: All errors are wrapped in the same JSON structure
  - Sets appropriate HTTP status :: Includes the correct status code for the error type
  - Handles serialization errors :: Logs failures to write the error response
  #+BEGIN_SRC go
// errorResponse is the method we use to send a json formatted error to the client in case of any error
func (api *ApiServer) errorResponse(w http.ResponseWriter, r *http.Request, status int, message interface{}) {
	e := helpers.Envelope{
		"error": message,
	}
	err := helpers.WriteJson(r.Context(), w, status, e, nil)

	if err != nil {
		api.logError(err)
		w.WriteHeader(http.StatusInternalServerError)
	}
}
  #+END_SRC

*** Server error handling

- Server error handler :: The `serverErrorResponse` method handles internal server errors
  - Logs detailed error :: Records the full error for debugging
  - Returns generic message :: Avoids exposing internal details to clients
  - Uses HTTP 500 status :: Indicates an internal server problem
  #+BEGIN_SRC go
// serverErrorResponse uses the two other methods to log the details of the error and send internal server error to the client
func (api *ApiServer) serverErrorResponse(w http.ResponseWriter, r *http.Request, err error) {
	api.logError(err)
	message := "the server encountered an error to process the request"
	api.errorResponse(w, r, http.StatusInternalServerError, message)
}
  #+END_SRC

*** Client error handling

- Client error handlers :: Multiple methods handle different client error scenarios
  - Not found :: `notFoundResponse` for missing resources (404)
  - Bad request :: `badRequestResponse` for malformed requests (400)
  - Method not allowed :: `methodNotAllowedResponse` for invalid HTTP methods (405)
  - Validation failure :: `failedValidationResponse` for invalid input (422)
  Each handler uses the appropriate status code and provides a clear error message.
  #+BEGIN_SRC go
// notFoundResponse method will be used to send notFound 404 status error json response to the client
func (api *ApiServer) notFoundResponse(w http.ResponseWriter, r *http.Request) {
	message := "the requested resource couldn't be found"
	api.errorResponse(w, r, http.StatusNotFound, message)
}

// badRequestResponse method will be used to send notFound 400 status error json response to the client
func (api *ApiServer) badRequestResponse(w http.ResponseWriter, r *http.Request, err error) {
	api.errorResponse(w, r, http.StatusBadRequest, err.Error())
}

// methodNotAllowed method will be used to send notFound 404 status error json response to the client
func (api *ApiServer) methodNotAllowedResponse(w http.ResponseWriter, r *http.Request) {
	message := fmt.Sprintf("the %s method is not supported for this resource", r.Method)
	api.errorResponse(w, r, http.StatusMethodNotAllowed, message)
}

// failedValidationResponse method will be used to send 422 status error json response to the client for invalid input
func (api *ApiServer) failedValidationResponse(w http.ResponseWriter, r *http.Request, errors map[string]string) {
	api.errorResponse(w, r, http.StatusUnprocessableEntity, errors)
}
  #+END_SRC

*** Authentication and authorization errors

- Authentication error handlers :: Handle various authentication failures
  - Invalid credentials :: `invalidAuthenticationCredResponse` for bad credentials
  - Invalid JWT :: `invalidJWTTokenSignatureResponse` for token validation failures
  - Missing authentication :: `authenticationRequiredResposne` for unauthenticated requests
  - Inactive user :: `unauthorizedAccessInactiveUserResponse` for non-activated accounts
  - Insufficient permissions :: `notPermittedResponse` for permission-related rejections
  These handlers provide clear distinctions between different authentication issues.
  #+BEGIN_SRC go
func (api *ApiServer) invalidAuthenticationCredResponse(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("WWW-Authenticate", "Bearer Jwt")
	message := "invalid authentication creds or token"
	api.errorResponse(w, r, http.StatusUnauthorized, message)
}

func (api *ApiServer) invalidJWTTokenSignatureResponse(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("WWW-Authenticate", "Bearer Jwt")
	message := "invalid jwt token signature."
	api.errorResponse(w, r, http.StatusUnauthorized, message)
}

func (api *ApiServer) authenticationRequiredResposne(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("WWW-Authenticate", "Bearer Jwt")
	message := "authentication required"
	api.errorResponse(w, r, http.StatusUnauthorized, message)
}

func (api *ApiServer) unauthorizedAccessInactiveUserResponse(w http.ResponseWriter, r *http.Request) {
	message := "user must be activated to access this resource"
	api.errorResponse(w, r, http.StatusForbidden, message)
}

func (api *ApiServer) notPermittedResponse(w http.ResponseWriter, r *http.Request) {
	message := "your user account doesn't have the necessary permissions to access this resource"
	api.errorResponse(w, r, http.StatusForbidden, message)
}
  #+END_SRC

*** Resource limitation errors

- Resource limitation handlers :: Handle rate limiting and capacity issues
  - Rate limiting :: `rateLimitExceedResponse` for request throttling (429)
  - Queue capacity :: `eventQueueFullResponse` for queue overflow (503)
  These handlers manage errors related to system resource constraints.
  #+BEGIN_SRC go
func (api *ApiServer) rateLimitExceedResponse(w http.ResponseWriter, r *http.Request) {
	message := "request rate limit reached, please try again later"
	api.errorResponse(w, r, http.StatusTooManyRequests, message)
}

func (api *ApiServer) eventQueueFullResponse(w http.ResponseWriter, r *http.Request) {
	message := "service unavailable, event queue is already full"
	api.errorResponse(w, r, http.StatusServiceUnavailable, message)
}
  #+END_SRC

** Usage examples

*** Handling internal server errors

Example of handling an unexpected database error:

#+BEGIN_SRC go
func (api *ApiServer) getEventHandler(w http.ResponseWriter, r *http.Request) {
    // Extract event ID from URL path
    eventID := chi.URLParam(r, "id")
    
    // Try to fetch the event from the database
    event, err := api.db.GetEvent(r.Context(), eventID)
    if err != nil {
        // Check if it's a "not found" error
        if errors.Is(err, database.ErrRecordNotFound) {
            api.notFoundResponse(w, r)
            return
        }
        
        // For any other database error, return a server error
        api.serverErrorResponse(w, r, fmt.Errorf("error fetching event: %w", err))
        return
    }
    
    // Respond with the event
    err = helpers.WriteJson(r.Context(), w, http.StatusOK, helpers.Envelope{"event": event}, nil)
    if err != nil {
        api.serverErrorResponse(w, r, err)
    }
}
#+END_SRC

*** Handling validation errors

Example of validating input and returning appropriate errors:

#+BEGIN_SRC go
func (api *ApiServer) createEventHandler(w http.ResponseWriter, r *http.Request) {
    // Parse the JSON request body
    var input struct {
        Type    string  `json:"type"`
        Message string  `json:"message"`
        Level   string  `json:"level"`
        Value   float64 `json:"value"`
    }
    
    // Read and parse JSON request body
    err := helpers.ReadJson(r.Context(), w, r, &input)
    if err != nil {
        api.badRequestResponse(w, r, err)
        return
    }
    
    // Create a validator
    v := helpers.NewValidator()
    
    // Validate the event type
    v.Check(input.Type != "", "type", "must be provided")
    v.Check(helpers.In(input.Type, "log", "metric"), "type", "must be either 'log' or 'metric'")
    
    // Validate type-specific fields
    switch input.Type {
    case "log":
        v.Check(input.Message != "", "message", "must be provided for log events")
        v.Check(input.Level != "", "level", "must be provided for log events")
        v.Check(helpers.In(input.Level, "info", "warn", "error"), "level", "must be one of: info, warn, error")
    case "metric":
        v.Check(input.Value != 0, "value", "must be provided for metric events")
    }
    
    // Return validation errors if any
    if !v.Valid() {
        api.failedValidationResponse(w, r, v.Errors)
        return
    }
    
    // Process the validated input
    // ...
}
#+END_SRC

*** Managing authentication failures

Example of handling various authentication scenarios:

#+BEGIN_SRC go
func (api *ApiServer) authenticateUser(w http.ResponseWriter, r *http.Request) {
    // Extract the Authorization header
    authHeader := r.Header.Get("Authorization")
    if authHeader == "" {
        api.authenticationRequiredResposne(w, r)
        return
    }
    
    // Check header format
    headerParts := strings.Split(authHeader, " ")
    if len(headerParts) != 2 || headerParts[0] != "Bearer" {
        api.invalidAuthenticationCredResponse(w, r)
        return
    }
    
    // Extract the token
    token := headerParts[1]
    
    // Verify JWT signature
    tokenClaims, err := api.verifyJWT(token)
    if err != nil {
        if errors.Is(err, ErrInvalidSignature) {
            api.invalidJWTTokenSignatureResponse(w, r)
            return
        }
        api.invalidAuthenticationCredResponse(w, r)
        return
    }
    
    // Check if user is active
    if !tokenClaims.Active {
        api.unauthorizedAccessInactiveUserResponse(w, r)
        return
    }
    
    // Check if user has required permissions
    if !api.hasRequiredPermissions(tokenClaims, "events:write") {
        api.notPermittedResponse(w, r)
        return
    }
    
    // Authentication successful, proceed with the request
    // ...
}
#+END_SRC

*** Responding to rate limiting

Example of handling rate limiting and queue capacity issues:

#+BEGIN_SRC go
func (api *ApiServer) createEventHandler(w http.ResponseWriter, r *http.Request) {
    // Check if rate limit is exceeded
    if !api.rateLimit.Allow() {
        api.rateLimitExceedResponse(w, r)
        return
    }
    
    // Parse and validate the event
    // ...
    
    // Create the new event
    newEvent := data.NewEventLog(eventID, level, message)
    
    // Try to add the event to the queue
    err = api.models.EventQueue.PutEvent(r.Context(), newEvent)
    if err != nil {
        // Check if the queue is full
        if errors.Is(err, ErrQueueFull) {
            api.eventQueueFullResponse(w, r)
            return
        }
        
        // Handle other errors
        api.serverErrorResponse(w, r, fmt.Errorf("failed to queue event: %w", err))
        return
    }
    
    // Send success response
    response := map[string]interface{}{
        "event_id": eventID,
        "status": "queued",
    }
    helpers.WriteJson(r.Context(), w, http.StatusAccepted, helpers.Envelope{"result": response}, nil)
}
#+END_SRC