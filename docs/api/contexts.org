* Request Context Management
:PROPERTIES:
:TOC: :include descendants
:END:

:CONTENTS:
- [[#concepts-and-purpose][Concepts and purpose]]
  - [[#request-id-generation-and-tracking][Request ID generation and tracking]]
  - [[#request-correlation][Request correlation]]
  - [[#context-propagation][Context propagation]]
- [[#design-and-implementation][Design and implementation]]
  - [[#context-key-definition][Context key definition]]
  - [[#request-id-generation][Request ID generation]]
  - [[#context-retrieval-mechanism][Context retrieval mechanism]]
- [[#usage-examples][Usage examples]]
  - [[#adding-request-id-to-context][Adding request ID to context]]
  - [[#retrieving-request-id-from-context][Retrieving request ID from context]]
  - [[#integrating-with-logging][Integrating with logging]]
  - [[#tracing-with-opentelemetry][Tracing with OpenTelemetry]]
:END:

** Concepts and purpose

*** Request ID generation and tracking

- Request ID tracking :: Each HTTP request is assigned a unique request ID that:
  - Uniquely identifies the request :: Every request gets a UUID v4 identifier with practically no collision risk
  - Persists throughout request lifecycle :: The ID is available from initial receipt to final response
  - Enables tracing across components :: All operations related to a request share the same ID
  - Simplifies debugging :: Logs and errors can be correlated by request ID
  This tracking mechanism forms the foundation of the API server's observability strategy.

*** Request correlation

- Request correlation :: The request ID enables correlation of different operations:
  - Log entries :: Multiple log entries from different components can be linked
  - Error reports :: Errors can be associated with the specific request that caused them
  - Metrics :: Request-specific performance measurements can be collected
  - Traces :: Distributed tracing spans can be connected using the request ID
  This correlation capability provides a clear picture of request flow through the system.

*** Context propagation

- Context propagation :: The request context carries the request ID through:
  - HTTP handlers :: Handlers access the same context with request ID
  - Middleware :: Middleware components can enrich or use the context
  - Event processing :: Events generated by a request can inherit the request ID
  - Downstream services :: The ID can be passed to other services for end-to-end tracing
  This propagation enables tracking a request across component and service boundaries.

** Design and implementation

*** Context key definition

- Context key type :: A custom type for context keys that prevents collisions
  - Uses a string-based type :: Provides type safety for context keys
  - Avoids direct string usage :: Prevents accidental key collisions in the context
  #+BEGIN_SRC go
type contextKey string

const RequestContextKey = contextKey("request_id")
  #+END_SRC

*** Request ID generation

- Setting request ID :: The `setReqIDContext` method generates and adds a request ID to the context
  - Creates a new UUID :: Generates a version 4 UUID for uniqueness
  - Creates a new context :: Derives a new context with the request ID added
  - Updates the request :: Returns a new request with the updated context
  #+BEGIN_SRC go
/*
setReqIDContext is used to generate a unique request id and set it on http.request context.
*/
func (api *ApiServer) setReqIDContext(r *http.Request) *http.Request {
	reqId := uuid.New()
	nCtx := context.WithValue(r.Context(), RequestContextKey, reqId.String())
	r = r.WithContext(nCtx)
	return r
}
  #+END_SRC

*** Context retrieval mechanism

- Getting request ID :: The `getReqIDContext` method retrieves the request ID from the context
  - Extracts the value :: Retrieves the value from the context using the context key
  - Type assertion :: Converts the generic context value to a string
  - Returns ID as string :: Provides the request ID in a usable string format
  #+BEGIN_SRC go
/*
getReqIDContext is used to get the unique request id from http.request context.
*/
func (api *ApiServer) getReqIDContext(r *http.Request) string {
	reqID := r.Context().Value(RequestContextKey)
	return reqID.(string)
}
  #+END_SRC

** Usage examples

*** Adding request ID to context

Example of adding a request ID to the context in a middleware:

#+BEGIN_SRC go
package main

import (
    "net/http"
    
    "github.com/cybrarymin/behavox/api"
)

func addRequestIDMiddleware(next http.Handler) http.Handler {
    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        // Create API server instance (real code would use an existing instance)
        server := &api.ApiServer{}
        
        // Add request ID to context
        r = server.setReqIDContext(r)
        
        // Pass control to the next handler
        next.ServeHTTP(w, r)
    })
}

func main() {
    // Create a simple handler
    handler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        w.Write([]byte("Hello, world!"))
    })
    
    // Wrap the handler with request ID middleware
    wrappedHandler := addRequestIDMiddleware(handler)
    
    // Register the handler
    http.Handle("/", wrappedHandler)
    
    // Start the server
    http.ListenAndServe(":8080", nil)
}
#+END_SRC

*** Retrieving request ID from context

Example of retrieving and using the request ID:

#+BEGIN_SRC go
func handleRequest(w http.ResponseWriter, r *http.Request) {
    // Get the API server instance
    server := getApiServer()
    
    // Retrieve the request ID
    requestID := server.getReqIDContext(r)
    
    // Use the request ID
    w.Header().Set("X-Request-ID", requestID)
    
    // Log with the request ID
    log.Printf("Processing request %s", requestID)
    
    // Process the request...
    
    // Include the request ID in the response
    response := map[string]string{
        "status":      "success",
        "request_id":  requestID,
        "message":     "Request processed successfully",
    }
    
    // Write JSON response
    w.Header().Set("Content-Type", "application/json")
    json.NewEncoder(w).Encode(response)
}
#+END_SRC

*** Integrating with logging

Example of integrating request ID with structured logging:

#+BEGIN_SRC go
func loggingMiddleware(next http.Handler) http.Handler {
    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        server := getApiServer()
        
        // Ensure request has ID
        r = server.setReqIDContext(r)
        requestID := server.getReqIDContext(r)
        
        // Create a logger with request ID
        requestLogger := server.Logger.With().
            Str("request_id", requestID).
            Str("method", r.Method).
            Str("path", r.URL.Path).
            Str("remote_addr", r.RemoteAddr).
            Logger()
        
        // Log request start
        requestLogger.Info().Msg("Request started")
        
        start := time.Now()
        
        // Create response recorder to capture status code
        rec := httpsnoop.CaptureMetrics(next, w, r)
        
        // Log request completion
        requestLogger.Info().
            Int("status", rec.Code).
            Dur("duration", time.Since(start)).
            Int64("bytes", rec.Written).
            Msg("Request completed")
    })
}
#+END_SRC

*** Tracing with OpenTelemetry

Example of using request ID with OpenTelemetry tracing:

#+BEGIN_SRC go
func tracingMiddleware(next http.Handler) http.Handler {
    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        server := getApiServer()
        
        // Ensure request has ID
        r = server.setReqIDContext(r)
        requestID := server.getReqIDContext(r)
        
        // Start a new trace span for this request
        ctx, span := otel.Tracer("api").Start(r.Context(), r.URL.Path)
        defer span.End()
        
        // Add request ID as a span attribute
        span.SetAttributes(attribute.String("request_id", requestID))
        
        // Add other useful attributes
        span.SetAttributes(
            attribute.String("http.method", r.Method),
            attribute.String("http.path", r.URL.Path),
            attribute.String("http.remote_addr", r.RemoteAddr),
        )
        
        // Update the request with the span context
        r = r.WithContext(ctx)
        
        // Process the request
        next.ServeHTTP(w, r)
    })
}
#+END_SRC